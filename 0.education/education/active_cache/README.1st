Test 구현체, 방법 선택
=====================
 1) googletest
    c++ xUnit으로는 매우 쓸만하나 ruby xUnit에 비해서는 여러모로 많이 불편하다.
    so, c++ xUnit out

 2) interpreter embedding
    솔직히 active_cache를 테스트하는데 이게 나왔다는 자체가 
    잘못된거다. over-engineering에 온갖 삽질이 있는것.

    하지만 이걸 하다 정말 값진걸 얻다.
    rice를 사용하여 ruby <=> c++간에 UDT의 instance를 관리하는 방안을 찾다.

    code/ruby/embed/rice/jukebox를 보면된다.

    여담으로 embedding할때는 공유 자료구조에 대한 spec을 잡는 것이 가장 중요하다.

 3) bdd_c.rb
    rspec보다 아직 tdd에 익숙한 편이다. 나중에 이리로 갈 예정

 4) tdd_cpp.rb
    bdd_c를 변형한 것 swig가 생성한 코드가 그대로 컴파일된다. 
    (rb_intern("hash")를 찾지 않아도 된다는 거지)
        

active_object
=============
 1) POSA2의 active object (논문 참고)
 
 2) caller, callee의 코드가 다른 쓰레드에서
    scheduling된다.

 3) asio::io_service, asio::io_service::work를 이용하여 간단히 구현
    동기화/스케쥴되어야하는 코드는 io_service.post해서 구현한다.
 
active_scheduler 
================
 1) active_object 상속받고 asio::deadline_timer를 사용해서 구현
 
 2) 정기적으로 사용자가 지정한 코드를 io_service.post한다.

active_cache 
============
 1) timed_cache에 active_scheduler를 상속시킨것 why?
    미들웨어에 내부에서 캐쉬가 이렇게 동작해야하는 경우가 많이 있어 그렇다.
    threading, synchronization등을 캐쉬 내부에 넣어버리는 것

schedule_info
=============
 1) cron과 동일한 디자인을 가진다.

  *  *  *  *  *  command to be executed
  -  -  -  -  -
  |  |  |  |  |
  |  |  |  |  +----- day of week (0 - 6) (Sunday=0)
  |  |  |  +-------- month (1 - 12)
  |  |  +----------- day of month (1 - 31)
  |  +-------------- hour (0 - 23)
  +----------------- min (0 - 59)

