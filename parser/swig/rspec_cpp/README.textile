h1. Unit Testing C and C&#043;&#043; ... with RSpec

If you're writing C/C&#043; code, it's natural to write your unit tests in the same language (or use C&#043;&#043; for your C test code). All the well-known unit testing tools take this approach.

I think we can agree that neither language offers the best developer productivity among all the language choices out there. Most of us use either language because of perceived performance requirements, institutional and industry tradition, _etc._ 

There's growing interest, however, in mixing languages, tools, and _paradigms_ to get the best tool for a particular job. &lt;shameless-plug&gt;I'm giving a talk March 7^th^ at "SD West":https://www.cmpevents.com/SDw8/a.asp?option=C&V=11&SessID=6102 on this very topic, called "Polyglot and Poly-Paradigm Programming":https://www.cmpevents.com/SDw8/a.asp?option=C&V=11&SessID=6102 &lt;/shameless-plug&gt;.

So, why not use a more productive language for your C or C&#043;&#043; unit tests? You have more freedom in your development chores than what's required for production. Why not use Ruby's "RSpec":http://rspec.info/, a "Behavior-Driven Development":http://behaviour-driven.org/ tool for acceptance and unit testing? Or, you could use Ruby's version of "JUnit":http://www.junit.org, called "Test::Unit":http://ruby-doc.org/stdlib/libdoc/test/unit/rdoc/classes/Test/Unit.html. The hard part is integrating Ruby and C/C&#043;&#043;. If you've been looking for an excuse to bring Ruby (or Tcl or Python or Java or...) into your C/C&#043;&#043; environment, starting with development tasks is usually the path of least resistance.

I did some experimenting over the last few days to integrate "RSpec":http://rspec.info/  using "SWIG":http://www.swig.org (Simplified Wrapper and Interface Generator), a tool for bridging libraries written in C and C&#043;&#043; to other languages, like Ruby. The "Ruby section":http://www.swig.org/Doc1.3/Ruby.html of the SWIG manual was very helpful.

h2. My Proof-of-Concept Code

Here is a zip file of my experiment: "http://tbd.com":http//tbd.com. This is far from a complete and working solution, but I think it shows promise. See the *Current Limitations* section below for details.

Unzip the file into a directory. I'll assume you named it @rspec_for_cpp@. You need to have @gmake@, @gcc@, SWIG and Ruby installed, along with the RSpec "gem". Right now, it only builds on OS X and Linux (at least the configurations on my machines running those OS's - see the discussion below). To run the build, use the following commands:

<pre>
	<code>
		$ cd rspec_for_cpp/cpp
		$ make 
	</code>
</pre>

You should see it finish with the lines

<pre>
	<code>
		( cd ../spec; spec *_spec.rb )
		.........

		Finished in 0.0***** seconds

		9 examples, 0 failures
	</code>
</pre>

Congratulations, you've just tested some C and C&#043; code with RSpec! (Or, if you didn't succeed, see the notes in the @Makefile@ and the discussion below.)

h2. The Details

I'll briefly walk you through the files in the zip and the key steps required to make it all work.

h3. @cexample.h@

Here is a simple C header file.

<pre>
	<code>
		/* cexample.h */
		#ifndef CEXAMPLE_H
		#define CEXAMPLE_H
		#ifdef __cplusplus
		 extern "C" {
		#endif
		char* returnString(char* input);
		double returnDouble(int input);
		void  doNothing();

		#ifdef __cplusplus
		 }
		#endif
		#endif
	</code>
</pre>

Of course, in a pure C shop, you won't need the @#ifdef __cplusplus@ stuff. I found this was essential in my experiment when I mixed C and C&#043;&#043;, as you might expect.

h3. @cpp/cexample.c@

Here is the corresponding C source file.

<pre>
	<code>
		/* cexample.h */

		char* returnString(char* input) {
			return input;
		}

		double returnDouble(int input) {
			return (double) input;
		}

		void  doNothing() {}
	</code>
</pre>

h3. @cpp/CppExample.h@

Here is a C&#043;&#043; header file.

<pre>
	<code>
		#ifndef CPPEXAMPLE_H
		#define CPPEXAMPLE_H

		#include <string>

		class CppExample 
		{
		public:
			CppExample();
			CppExample(const CppExample& foo);
			CppExample(const char* title, int flag);
			virtual ~CppExample();

			const char* title() const;
			void        title(const char* title);
			int         flag() const;
			void        flag(int value);

			static int countOfCppExamples();
		private:
			std::string _title;
			int         _flag;
		};

		#endif
	</code>
</pre>

h3. @cpp/CppExample.cpp@

Here is the corresponding C&#043;&#043; source file.

<pre>
	<code>
		#include "CppExample.h"

		CppExample::CppExample() : _title("") {}
		CppExample::CppExample(const CppExample& foo): _title(foo._title) {}
		CppExample::CppExample(const char* title, int flag) : _title(title), _flag(flag) {}
		CppExample::~CppExample() {}

		const char* CppExample::title() const { return _title.c_str(); }
		void        CppExample::title(const char* name) { _title = name; }

		int  CppExample::flag() const { return _flag; }
		void CppExample::flag(int value) { _flag = value; }

		int CppExample::countOfCppExamples() { return 1; }
	</code>
</pre>

h3. @cpp/example.i@

Typically in SWIG, you specify a @.i@ file to the @swig@ command to define the _module_ that wraps the classes and global functions, which classes and functions to expose to the target language (usually all in our case), and other assorted customization options, which are discussed in the "SWIG manual":http://www.swig.org/Doc1.3. I'll show the @swig@ command in a minute. For now, note that I'm going to generate an @example_wrap.cpp@ file that will function as the bridge between the languages.

Here's my @example.i@, where I named the module @example@. 

<pre>
	<code>
		%module example
		%{
			#include "cexample.h"
			#include "CppExample.h"	
		%}
		%include "cexample.h"
		%include "CppExample.h"
	</code>
</pre>

It looks odd to have header files appear twice. The code inside the @%{...%}@ (with a '#' before each @include@) are standard C and C&#043;&#043; statements, _etc._ that will be inserted verbatim into the generated "wrapper" file, @example_wrap.cpp@, so that file will compile when it references anything declared in the header files. The second case, with a '%' before the @include@ statements[1], tells SWIG to make all the declarations in those header files available to the target language. (You can be more selective, if you prefer...)

Following Ruby conventions, the Ruby plugin for SWIG automatically names the module with an upper case first letter (@Example@), but you use @require 'example'@ to include it, as we'll see shortly.

h3. Building 

See the @cpp/Makefile@ for the gory details. In a nutshell, you run the @swig@ command like this.

<pre>
	<code>
		swig -c++ -ruby -Wall -o example_wrap.cpp example.i
	</code>
</pre>

Next, you create a dynamically-linked library, as appropriate for your platform, so the Ruby interpreter can load the module dynamically when required. The @Makefile@ can do this for Linux and OS X platforms. See the "Ruby section":http://www.swig.org/Doc1.3/Ruby.html of the SWIG manual for Windows specifics.

If you test-drive your code, which tends to drive you towards minimally-coupled "modules", then you can keep your libraries and build times small, which will make the build and test cycle very fast!

h3. @spec/cexample_spec.rb@ and @spec/cppexample_spec.rb@ 

Finally, here are the RSpec files that exercise the C and C&#043;&#043; code. (Disclaimer: these aren't the best spec files I've ever written. For one thing, they don't exercise all the @CppExample@ methods! So sue me... :)

<pre>
	<code>
		require File.dirname(__FILE__) + '/spec_helper'
		require 'example'

		describe "Example (C functions)" do
		  it "should be a constant on Module" do
		    Module.constants.should include('Example')
		  end
		  it "should have the methods defined in the C header file" do
		    Example.methods.should include('returnString')
		    Example.methods.should include('returnDouble')
		    Example.methods.should include('doNothing')
		  end
		end

		describe Example, ".returnString" do
		  it "should return the input char * string as a Ruby string unchanged" do
		    Example.returnString("bar!").should == "bar!"
		  end  
		end

		describe Example, ".returnDouble" do
		  it "should return the input integer as a double" do
		    Example.returnDouble(10).should == 10.0
		  end
		end

		describe Example, ".doNothing" do
		  it "should exist, but do nothing" do
		    lambda { Example.doNothing }.should_not raise_error
		  end
		end
	</code>
</pre>

and

<pre>
	<code>
	require File.dirname(__FILE__) + '/spec_helper'
	require 'example'

	describe Example::CppExample do
	  it "should be a constant on module Example" do
	    Example.constants.should include('CppExample')
	  end
	end

	describe Example::CppExample, ".new" do
	  it "should create a new object of type CppExample" do
	    example = Example::CppExample.new("example1", 1)
	    example.title.should == "example1"
	    example.flag.should  == 1
	  end
	end

	describe Example::CppExample, "#title(value)" do
	  it "should set the title" do
	    example = Example::CppExample.new("example1", 1)
	    example.title("title2")
	    example.title.should == "title2"
	  end
	end

	describe Example::CppExample, "#flag(value)" do
	  it "should set the flag" do
	    example = Example::CppExample.new("example1", 1)
	    example.flag(2)
	    example.flag.should == 2
	  end
	end
	</code>
</pre>

If you love RSpec like I do, this is a very compelling thing to see!


And now for the small print:

h2. Current Limitations

As I said, this is just an experiment at this point. Volunteers to make this _battle-ready_ would be most welcome!

h3. General

h4. The Example @Makefile@ File 

h5. It Must Be Hand Edited for Each New or Renamed Source File

You've probably already solved this problem for your own make files. Just merge in the example @Makefile@ to pick up the SWIG- and RSpec-related targets and rules.

h5. It Only Knows How to Build Shared Libraries for Mac OS X and Linux (and Not Very Well)

Some definitions are probably unique to my OS X and Linux machines. Windows is not supported at all. However, this is also easy rectify. Start with the notes in the @Makefile@ itself.

h4. The @module.i@ File Must Be Hand Edited for Each File Change

Since the format is simple, a make task could fill a template file with the changed list of source files during the build.

h4. Better Automation

It should be straightforward to provide scripts, IDE/Editor shortcuts, _etc_. that automate some of the tasks of adding new methods and classes to your C and C&#043;&#043; code when you introduce them  __first__ in your "spec" files. (The true TDD way, of course.)

h3. Specific Issues for C Code Testing

I don't know of any other C-specific issues, so unit testing with Ruby is most viable today for C code. Although I haven't experimented extensively, C functions and variables are easily mapped by SWIG to a Ruby module. The "Ruby section":http://www.swig.org/Doc1.3/Ruby.html of the SWIG manual discusses this mapping in some detail.

h3. Specific Issues for C&#043;&#043; Code Testing

More work will be required to make this viable. It's important to note that SWIG cannot handle all C&#043;&#043; constructs (although there are workarounds for most issues, if you're committed to this approach...). For example, namespaces, nested classes, some template and some method overloading scenarios are not supported. The "SWIG manual":http://www.swig.org/Doc1.3 has details.

Also, during my experiment, SWIG didn't seem to map @const std::string&@ objects in C&#043;&#043; method signatures to Ruby strings, as I would have expected (@char*@ worked fine).

h2. Is It a Viable Approach?

Once the *General* issues listed above are handled, I think this approach would work very well for C code. For C&#043;&#043; code, there are more issues that need to be addressed, and programmers who are committed to this strategy will need to tolerate some issues (or just use C&#043;&#043;-language tools for some scenarios).

h2. Conclusions: Making It Development-Team Ready

I'd like to see this approach pushed to its logical limit. I think it has the potential to really improve the productivity of C and C&#043;&#043; developers and the quality of their test coverage, by leveraging the productivity and power of dynamically-typed languages like Ruby. If you prefer, you could use Tcl, Python, even Java instead.

h3. License

This code is complete open and free to use. Of course, use it at your own risk; I offer it without warranty, _etc._, _etc_. When I polish it to the point of making it an "official" project, I will probably release under the Apache license.

fn1. I spent a lot of time debugging problems because I had a '#' where I should have had a '%'! _Caveat emptor_!
